/* global $, materials, SAVE_URL */

function make_new_material_section(name, id) {

	var $li = $('<li></li>', {
		"class": 'material-section',
	});

	var $head = $('<div></div>', {
		"class": 'material',
		"text": name,
		"data-id": id
	});

	var $body = $('<ul></ul>', {
		"class": 'collection processes'
	});

	var $procdrop = $('<li></li>', {
		"class": 'collection-item',
		"text": "Drop your " + name + " processes here."
	});

	$procdrop.appendTo($body);
	$head.appendTo($li);
	$body.appendTo($li);

	$li.droppable({
		greedy: true,

		drop: function(event, ui) {
			var from = ui.draggable[0];
			var id = $(from).data("id");
			var name = $(from).data("name");
			if ($(from).data('type') == 'procedure') {
				add_proc_to($li, name, id);
				// var $proc = $('<li></li>', {
				// 	"class": 'collection-item process',
				// 	"text": name,
				// 	"data-id": id
				// });
				// var $delButton = make_delete_button($proc);
				// $delButton.appendTo($proc);
				// $procdrop.before($proc);
			};

		}
	});

	var $delButton = make_delete_button($li);
	$delButton.appendTo($head);

	$li.appendTo($('#build'));
	return $li;
}

function add_proc_to($mat, name, id) {
	var $proc = $('<li></li>', {
		"class": 'collection-item process',
		"text": name,
		"data-id": id,
		"data-name": name
	});
	var $delButton = make_delete_button($proc);
	$delButton.appendTo($proc);
	$mat.find('.processes :last-child').before($proc);
}

function make_delete_button(element) {
	var $delButton = $('<button></button>', {
		"class": 'boxclose'
	}).click(function() {element.remove();});
	return $delButton;
}

function build_data() {
	var result = [];
	$('#build > .material-section').each(function( index ) {
		var thing = {}
		thing["name"] = $(this).find(".material").data("name");
		thing["id"] = $(this).find(".material").data("id");

		var procedures = [];
		$(this).find(".process").each(function (index) {
			procedures.push({"name": $(this).data("name"), "id": $(this).data("id")});
		});
		thing["procedures"] = procedures;

		result.push(thing);
	})
	return result;
}

function fill_build( data ) {
	for (material in data){
		var $mat = make_new_material_section(material["name"], material["id"]);
		for (proc in material["procedures"]) {
			add_proc_to($mat, proc["name"], proc["id"]);
		}
	}
}

function clear_build() {
	$('#build *').remove();
}

$.ajaxSetup({
  headers: {
    'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
  }
});

/*
Pretty hack-ey. document.ready doesn't seem to work here. This also causes problems loading custom css.
*/
$(window).load(function() {
	$('#material-search').autocomplete({
		data: materials
	});

	$('.dropdown-content').css({'position': 'absolute', 'width': '350px'});
});

$(document).ready(function() {
	$('.draggable').draggable({
		containment: 'window',
		appendTo: 'body',

		helper: function (event) {
			return $('<div></div>', {
				"class": "drag-thing",
				"text": event.currentTarget.innerText
			})
		},

		cursorAt: {
			top: 25,
			left: 50,
		}
	});

	$('#assembly').droppable({
		drop: function (event, ui) {
			var item = ui.draggable[0]
			var name = item.innerText;
			var id = $(item).data("id")

			if ($(item).data('type') == 'material') {

				var $li = make_new_material_section(name, id);
			}
		}
	});

	$('#build').sortable({
		containment: "window",
		appendTo: 'body'
	})

	$('#save').click(function() {
		$.ajax({
			dataType: "json",
			type: "POST",
			url: SAVE_URL,
			data: { build: build_data() },
			success: function(response, status, xhr) {
				console.log(response);
			},

			error: function(xhr, status, errorThrown) {
				console.log(status);
			},

			complete: function (xhr, status) {
				console.log('done!');
			}
		});
	})
});
